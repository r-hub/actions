name: 'r-hub/actions/run-check'
description: |
  Run R-hub checks.
author: 'Gábor Csárdi'

inputs:
  token:
    description: |
      Custom GitHub personal access token. Useful to allow access to
      private repositories or other resources.
  job-config:
    description: |
      The matrix config, as set up by the `setup` action.
  remove-dot-github:
    description: |
      Whether to delete `.github` directory before the check. This is
      usually not a good idea, but R-hub needs to do it when running on
      a package submitted to the RC cluster.
    default: false

runs:
  using: "composite"
  steps:
  - name: Remove .github
    if: ${{ inputs.remove-dot-github == 'true' }}
    run: |
      unlink(".github", force = TRUE, recursive = TRUE)
    shell: Rscript {0}

  - name: pre-check scripts
    if: ${{ toJson(fromJson(inputs.job-config).pre-check || null) != 'null' }}
    run: |
      cat("::group::Pre-check scripts\n")
      source("${{ github.action_path }}/json.R")
      config <- json[["parse"]](${{ toJSON(inputs.job-config) }})
      for (scr in config[["pre-check"]]) {
        message("Running pre-check script: ", scr)
        # error on warning, because system() does not error (!)
        options(warn = 2)
        system(file.path("${{ github.action_path }}/scripts", scr))
      }
      cat("::endgroup::\n")
    shell: Rscript {0}

  - name: Configure check script
    id: check-script
    run: |
      # If env var is not set, we run R CMD CHECK, otherwise the
      # custom check
      cs <- Sys.getenv("RHUB_ACTIONS_CHECK_SCRIPT")
      if (cs != "") {
        ev <- paste0("check-script=", cs)
        cat(ev, sep = "\n", append = TRUE, file = Sys.getenv("GITHUB_OUTPUT"))
      }
    shell: Rscript {0}

  - uses: r-lib/actions/check-r-package@v2
    if: ${{ ! steps.check-script.outputs.check-script }}
    with:
      args: "c('--no-manual', if (!grepl('(^| )[-][-]extra[-]arch( |$)', Sys.getenv('CHECK_ARGS'))) '--as-cran', '--install-args=--build', strsplit(Sys.getenv('CHECK_ARGS'), '[ ]+')[[1]])"
      build_args: "c('--no-manual', strsplit(Sys.getenv('BUILD_ARGS'), '[ ]+')[[1]])"
      upload-results: never
      upload-snapshots: false
    env:
      R_KEEP_PKG_SOURCE: yes

  - name: Output
    if: ${{ always() && ! steps.check-script.outputs.check-script }}
    run: |
      # Show output of installation, examples and tests
      cat("::group::Show installation output\n")
      out <- dir("check", recursive=TRUE, pattern = "00install.out", full.names = TRUE)
      if (length(out) > 0) {
        for (of in out) {
          writeLines(readLines(of))
        }
      }
      cat("::endgroup::\n")
      cat("::group::Show output of examples and tests\n")
      out <- dir("check", recursive=TRUE, pattern = "[.]Rout", full.names = TRUE)
      writeLines("-- Examples and test output ---------------------------------------------")
      for (of in out) {
        writeLines(paste0("-- ", of))
        writeLines(readLines(of, warn = FALSE))
      }
      writeLines("-------------------------------------------------------------------------")
      cat("::endgroup::\n")
    shell: Rscript {0}

  - name: Check for valgrind errors
    if: ${{ always() && matrix.config.label == 'valgrind' }}
    run: |
      # Fail for valgrind errors
      cat("::group::Fail for valgrind errors\n")
      writeLines("-- Checking for valgrind errors -----------------------------------------")
      out <- dir("check", recursive=TRUE, pattern = "[.]Rout", full.names = TRUE)
      fail <- 0
      for (of in out) {
        l <- readLines(of, warn = FALSE)
        if (any(grepl("==[0-9]+== ERROR SUMMARY: [1-9][0-9]* error", l))) {
          fail <- 1
          writeLines(paste0("-- ", of))
          writeLines(l)
        }
      }
      writeLines("-------------------------------------------------------------------------")
      cat("::endgroup::\n")
      q(save = "no", status = fail)
    shell: Rscript {0}

  - name: Check for UBSAN errors
    if: ${{ always() && (matrix.config.label == 'clang-asan' || startsWith(matrix.config.label,'m1-san')) }}
    run: |
      # Fail for UBSAN errors
      cat("::group::Fail for UBSAN errors\n")
      out <- dir("check", recursive=TRUE, pattern = "[.]Rout", full.names = TRUE)
      fail <- 0
      for (of in out) {
        l <- readLines(of, warn = FALSE)
        if (any(grepl("SUMMARY: UndefinedBehaviorSanitizer:", l, fixed = TRUE))) {
          fail <- 1
          break
        }
      }
      cat("::endgroup::\n")
      q(save = "no", status = fail)
    shell: Rscript {0}

  - name: Custom check script
    if: ${{ steps.check-script.outputs.check-script }}
    run: ${{ steps.check-script.outputs.check-script }}
    shell: bash

  - name: Check for rchk errors
    if: ${{ always() && matrix.config.label == 'rchk' }}
    run: |
      # Fail for rchk errors.
      # Unfortunately not all errors are fatal, some are allowed,
      # but CRAN does not tell us which ones, on purpose... :(
      cat("::group::Fail for rchk errors\n")
      writeLines("-- Checking for rchk errors ---------------------------------------------")
      pkg <- read.dcf("DESCRIPTION", "Package")[[1]]
      bcheck <- file.path("/opt/R/devel-rchk/packages/lib", pkg, "libs", paste0(pkg, ".so.bcheck"))
      if (!file.exists(bcheck)) {
        stop("bcheck output file does not exist")
      }
      l <- readLines(bcheck)
      errs <- grep("^  \\[[A-Z][A-Z]\\] ", l, value = TRUE)
      ignored <- c(
        "unsupported form of unprotect",
        "has address taken, results will be incomplete"
      )
      for (ign in ignored) {
        errs <- grep(ign, errs, fixed = TRUE, invert = TRUE, value = TRUE)
      }
      fail <- if (length(errs)) 1 else 0
      writeLines("-------------------------------------------------------------------------")
      cat("::endgroup::\n")
      q(save = "no", status = fail)
    shell: Rscript {0}

  - name: Save binary package
    if: ${{ always() }}
    run: |
      # Save binary package
      cat("::group::Save binary package\n")
      out <- dir("check", recursive=TRUE, pattern = "00install.out", full.names = TRUE)
      if (length(out) > 0) {
        lns <- readLines(out[1])
        pkgline <- grep("^packaged installation", lns, value = TRUE)
        if (length(pkgline) > 0) {
          pkg <- sub("['’].*$", "", sub("^.*as ['‘]", "", pkgline))
          if (file.copy(pkg, "check")) {
            message("Copied binary package '", pkg, "' to check/")
          } else {
            warning("Could not copy binary package '", pkg, "' to check/")
          }
        } else {
          warning("Could not find binary package.")
        }
      } else {
        warning("Could not find binary package.")
      }
      cat("::endgroup::\n")
    shell: Rscript {0}

  - uses: actions/upload-artifact@v4
    if: ${{ always() }}
    with:
      name: ${{ matrix.config.label }}-${{ github.job }}-${{ matrix.config.id || strategy.job-index }}-results
      path: check
